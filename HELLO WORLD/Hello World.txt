# HELLO WORLD
-------------

* Introduction to Java
----------------------
2 min

Welcome to the world of Java programming!

Programming languages enable humans to write instructions that a computer can perform. With precise instructions, computers coordinate applications and systems that run the modern 
world.

Sun Microsystems released the Java programming language in 1995. Java is known for being simple, portable, secure, and robust. Though it was released over twenty years ago, Java remains 
one of the most popular programming languages today.

One reason people love Java is the Java Virtual Machine, which ensures the same Java code can be run on different operating systems and platforms. Sun Microsystems’ slogan for Java was 
“write once, run everywhere”.

Programming languages are composed of syntax, the specific instructions which Java understands. We write syntax in files to create programs, which are executed by the computer to perform 
the desired task.

Let’s start with the universal greeting for a programming language. We’ll explore the syntax in the next exercise.

* Instructions
--------------
Checkpoint 1 Passed
1.
You’re looking at a computer program written in Java.

Run the code in the text editor to see what is printed to the screen.

You don’t have to change anything in the code editor.

This should appear in the terminal after you press Run:

Hello World!

HelloWorld.java
---------------
public class HelloWorld {
  public static void main(String[] args) {
    System.out.println("Hello World!");
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Hello Java File!
------------------
6 min
Java runs on different platforms, but programmers write it the same way. Let’s explore some rules for writing Java.

In the last exercise, we saw the file HelloWorld.java. Java files have a .java extension. Some programs are one file, others are hundreds of files!

Inside HelloWorld.java, we had a class:

public class HelloWorld {
  
}

We’ll talk about classes more in the future, but for now think of them as a single concept.

The HelloWorld concept is: Hello World Printer. Other class concepts could be: Bicycle, or: Savings Account.

We marked the domain of this concept using curly braces: {}. Syntax inside the curly braces is part of the class.

Each file has one primary class named after the file. Our class name: HelloWorld and our file name: HelloWorld. Every word is capitalized.

Inside the class we had a main() method which lists our program tasks:

public static void main(String[] args) {

}

Like classes, we used curly braces to mark the beginning and end of a method.

public, static, and void are syntax we’ll learn about in future lessons. String[] args is a placeholder for information we want to pass into our program. This syntax is necessary for the 
program to run but more advanced than we need to explore at the moment.

Our program also displayed the text "Hello World" on the screen. This was accomplished using a print statement:

System.out.println("Hello World");

We’ll learn more about print statements in the next exercise!

* Instructions
--------------
Checkpoint 1 Passed
1.
The text editor has a file, HelloYou.java, that contains a HelloYou class with a main() method.

Inside main(), add a statement which prints Hello someName!, with your name replacing someName. Make sure to end the statement with a semicolon.

For example, if your name were “Maria,” the program would print Hello Maria!.

Let’s say we want to print Howdy World!.

Place that message inside double quotes: "Howdy World!".

Then place the quoted message inside the parentheses of System.out.println().

System.out.println("Howdy World!");

The println has the letter l as in “laser”, not the number 1.

You must use double quotes!

HelloYou.java
-------------
public class HelloYou {
  public static void main(String[] args) {
    System.out.println("Hello Andres");
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Print Statements
------------------
8 min
Let’s take a closer look at this instruction from our previous program:

System.out.println("Hello World");

Print statements output information to the screen (also referred to as the output terminal). Let’s break this line of code down a little more. Don’t worry if some of the terms here are 
new to you. We’ll dive into what all of these are in much more detail later on!

	. System is a built-in Java class that contains useful tools for our programs.

	. out is short for “output”.

	. println is short for “print line”.

We can use System.out.println() whenever we want the program to create a new line on the screen after outputting a value:

System.out.println("Hello World");
System.out.println("Today is a great day to code!");

After "Hello World" is printed, the output terminal creates a new line for the next statement to be outputted. This program will print each statement on a new line like so:

Hello World
Today is a great day to code!

We also can output information using System.out.print(). Notice that we’re using print(), not println(). Unlike System.out.println(), this type of print statement outputs everything on 
the same line. For example:

System.out.print("Hello ");
System.out.print("World");

The above code will have the following output:

Hello World

In this example, if you were to use print() or println() again, the new text will print immediately after World on the same line. It’s important to remember where you left your program’s 
“cursor”. If you use println() the cursor is moved to the next line. If you use print() the cursor stays on the same line.

Note: Going forward after this exercise, all exercises will use System.out.println() to output values. You will get to practice using System.out.print() statements in the Checkpoints 
below, however.

* Instructions
--------------
Checkpoint 1 Passed
1.
Inside main() and underneath the print statement System.out.println("Let's play hide and seek.");, output the following two statements using System.out.print():

	. "Three..."

	. "Two..."

Be sure to use System.out.print(). Your code should look similar to the following example:

System.out.print("First statement");
System.out.print("Second statement");

Make sure the text in your print statements matches the instructions exactly. Capitalization, punctuation, and spaces matter!

Checkpoint 2 Passed
2.
Underneath your previous statements, output the following two text values using System.out.println():

	. "One..."

	. "Ready or not, here I come!"

This prompt asks you to use System.out.println() to output two statements.

Make sure the text in your print statements matches the instructions exactly. Capitalization, punctuation, and spaces matter!

HideAndSeek.java
----------------
public class HideAndSeek {
  public static void main(String[] args) {
    System.out.println("Let's play hide and seek.");
    System.out.print("Three...");
    System.out.print("Two...");
    System.out.println("One...");
    System.out.println("Ready or not, here I come!");
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Commenting Code
-----------------
5 min
Writing code is an exciting process of instructing the computer to complete fantastic tasks.

Code is also read by people, and we want our intentions to be clear to humans just like we want our instructions to be clear to the computer.

Fortunately, we’re not limited to writing syntax that performs a task. We can also write comments, notes to human readers of our code. These comments are not executed, so there’s no need 
for valid syntax within a comment.

When comments are short we use the single-line syntax: //.

// calculate customer satisfaction rating

When comments are long we use the multi-line syntax: /* and */.

/*
We chose to store information across multiple databases to
minimize the possibility of data loss. We'll need to be careful
to make sure it does not go out of sync!
*/

Another type of commenting option is the Javadoc comment which is represented by /** and */. Javadoc comments are used to create documentation for APIs 
(Application Programming Interfaces). When writing Javadoc comments, remember that they will eventually be used in the documentation that your users might read, so make sure to be 
especially thoughtful when writing these comments.

Javadoc comments are typically written before the declaration of fields, methods, and classes (which we’ll cover later in this course):

/**
* The following class accomplishes the following task...
*/

Here’s how a comment would look in a complete program:

/**
* The following class shows what a comment would look like in a program.
*/
public class CommentExample {
  // I'm a comment inside the class
  public static void main(String[] args) {
    // I'm a comment inside a method
    System.out.println("This program has comments!");
  }
}

Comments are different from printing to the screen, when we use System.out.println(). These comments won’t show up in our terminal, they’re only for people who read our code in the text 
editor.

* Instructions
--------------
Checkpoint 1 Passed
1.
The file Timeline.java has plain text information about Java.

Plain text facts aren’t valid syntax. We’ll use comments to avoid breaking the program.

Use the single-line comment syntax for the first fact.

Change this line into a comment:

Sun Microsystems announced the release of Java in 1995

We use the following syntax for a single-line comment: //.

To change A tale of sound and fury into a comment, place // before the line:

// A tale of sound and fury

Checkpoint 2 Passed
2.
Our program is still broken!

Use the multi-line syntax to make these lines into a single comment:

    James Gosling is a Canadian engineer who created Java while
    working at Sun Microsystems. His favorite number is the
    square root of 2!

You should still see You are a fun language! printed!

Multi-line comments have an opening and closing syntax.

Consider the text:

Life's but a walking shadow, a poor player That struts and frets his hour upon the stage And then is heard no more. It is a tale Told by an idiot, full of sound and fury, Signifying 
nothing.

We can make a comment from this text by surrounding it with /* and */.

/*
Life's but a walking shadow, a poor player That struts and frets his hour upon the stage And then is heard no more. It is a tale Told by an idiot, full of sound and fury, Signifying 
nothing.
*/

Timeline.java
-------------
public class Timeline {
  public static void main(String[] args) {
    System.out.println("Hello Java!");
    
    System.out.println("You were born in 1995");

    //Sun Microsystems announced the release of Java in 1995
    
    System.out.println("You were created by James Gosling");
    
		/*James Gosling is a Canadian engineer who 
		created Java while working at Sun Microsystems. 
		His favorite number is the square root of 2!*/
    
    System.out.println("You are a fun language!");
  }
} 

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Semicolons and Whitespace
---------------------------
5 min
As we saw with comments, reading code is just as important as writing code.

We should write code that is easy for other people to read. Those people can be co-workers, friends, or even yourself!

Java does not interpret whitespace, the areas of the code without syntax, but humans use whitespace to read code without difficulty.

Functionally, these two code samples are identical:

System.out.println("Java");System.out.println("Lava");System.out.println("Guava");

System.out.println("Java");

System.out.println("Lava");

System.out.println("Guava");

They will print the same text to the screen, but which would you prefer to read? Imagine if it was hundreds of instructions! Whitespace would be essential.

Java does interpret semicolons. Semicolons are used to mark the end of a statement, one line of code that performs a single task.

The only statements we’ve seen so far are System.out.println("My message!");.

Let’s contrast statements with the curly brace, {}. Curly braces mark the scope of our classes and methods. There are no semicolons at the end of a curly brace.

* Instructions
--------------
Checkpoint 1 Passed
1.
The LanguageFacts.java file prints information about Java to the screen.

Unfortunately, the writer of the file has avoided using whitespace.

Make the file easier to read by adding a newline after each statement!

Enter a newline character by pressing return or enter.

You should see all the code after your cursor move down by one line.

// Before entering a newline
System.out.println("Feels");System.out.println("Cramped!");

// Entering a newline after the first semicolon
System.out.println("Feels");
System.out.println("Cramped!");

Checkpoint 2 Passed
2.
Inside main(), add a new statement printing how you feel about coding.

Start the message with: “Programming is… “.

Remember to place a semicolon at the end of the statement!

For this checkpoint, you can use the System.out.println() function to print your message about coding. Don’t forget to end your statement with a semicolon (;) to indicate the end of the 
statement.

LanguageFacts.java
------------------
public class LanguageFacts {
  public static void main(String[] args) {
    // Press enter or return on your keyboard after each semicolon!
    
    System.out.println("Java is a class-based language.");
    System.out.println("Java classes have a 'main' method.");
    System.out.println("Java statements end with a semicolon.");
    System.out.println("Programming is the only good thing that I have in my life, and the only thing that saved me from falling in a big depression.  For that reason I love it.");
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------
















































































































